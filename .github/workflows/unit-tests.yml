name: Unit Tests

on:
  push:
    branches: [ main, demo ]
  pull_request:
    branches: [ main, demo ]

jobs:
  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          # Install testing dependencies
          pip install pytest pytest-cov
          # Install project runtime dependencies (needed for import to succeed)
          pip install pyspark databricks-connect
          # Optional: Install project in development mode if setup.py exists
          # if [ -f setup.py ]; then pip install -e .; fi
          
      - name: Run Tests
        run: |
          # Display project structure for debugging
          echo "Project structure:"
          find . -type d -not -path "*/\.*" | sort
          
          # Create a simple test for demonstration
          mkdir -p tests
          cat > tests/test_main.py << 'EOF'
          import unittest
          import sys
          import os
          
          # Add debugging information
          print(f"Current working directory: {os.getcwd()}")
          print(f"Directory contents: {os.listdir('.')}")
          
          # Explicitly add src to Python path
          src_path = os.path.abspath(os.path.join(os.getcwd(), 'src'))
          sys.path.insert(0, src_path)
          print(f"Added to sys.path: {src_path}")
          
          # Try to import the module
          try:
              from bundlesDevOpsDemo import main
              HAS_MODULE = True
              print("Successfully imported bundlesDevOpsDemo.main")
          except ImportError as e:
              HAS_MODULE = False
              print(f"Import error: {e}")
              print(f"Python path: {sys.path}")
              # Check src directory
              if os.path.exists('src'):
                  print(f"src directory contents: {os.listdir('src')}")
                  # Check bundlesDevOpsDemo directory
                  if os.path.exists('src/bundlesDevOpsDemo'):
                      print(f"bundlesDevOpsDemo directory contents: {os.listdir('src/bundlesDevOpsDemo')}")
          
          class TestMain(unittest.TestCase):
              def test_module_exists(self):
                  """Test if the module exists"""
                  self.assertTrue(HAS_MODULE, "bundlesDevOpsDemo module should exist")
                  
              @unittest.skipIf(not HAS_MODULE, "Module not available")
              def test_get_taxis_function_exists(self):
                  """Test if get_taxis function exists"""
                  self.assertTrue(hasattr(main, 'get_taxis'), "get_taxis function should exist")
                  
              @unittest.skipIf(not HAS_MODULE, "Module not available")
              def test_get_spark_function_exists(self):
                  """Test if get_spark function exists"""
                  self.assertTrue(hasattr(main, 'get_spark'), "get_spark function should exist")
              
              # Always run this test to verify file existence
              def test_main_file_exists(self):
                  """Test if main.py exists in expected location"""
                  main_file_path = os.path.join('src', 'bundlesDevOpsDemo', 'main.py')
                  self.assertTrue(os.path.exists(main_file_path), f"Expected {main_file_path} to exist")
                  with open(main_file_path, 'r') as f:
                      content = f.read()
                      print(f"First 100 chars of main.py: {content[:100]}...")
          
          if __name__ == '__main__':
              unittest.main()
          EOF
          
          # Run tests and capture output
          python -m pytest tests/ -v
          
      - name: Generate Coverage Report
        run: |
          # Generate coverage report if imports succeeded
          echo "Checking if coverage report generation is possible..."
          if python -c "import bundlesDevOpsDemo" 2>/dev/null; then
            echo "Module can be imported, generating coverage report"
            python -m pytest tests/ --cov=src/bundlesDevOpsDemo --cov-report=term
          else
            echo "Skipping coverage report generation, module can't be imported"
          fi 