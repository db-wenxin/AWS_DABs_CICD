name: Unit Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          # Install project dependencies
          pip install pytest pytest-cov
          
      - name: Run Tests
        run: |
          # Create a simple test for demonstration
          mkdir -p tests
          cat > tests/test_main.py << 'EOF'
          import unittest
          import sys
          import os
          
          
          repo_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
          src_path = os.path.join(repo_root, 'src')
          sys.path.append(src_path)
          
          try:
              from bundlesDevOpsDemo import main
              HAS_MODULE = True
          except ImportError:
              HAS_MODULE = False
              print(f"导入失败。当前Python路径: {sys.path}")
              print(f"src目录内容: {os.listdir(src_path) if os.path.exists(src_path) else '目录不存在'}")
          
          class TestMain(unittest.TestCase):
              def test_module_exists(self):
                  """Test if the module exists"""
                  self.assertTrue(HAS_MODULE, "bundlesDevOpsDemo module should exist")
                  
              @unittest.skipIf(not HAS_MODULE, "Module not available")
              def test_get_taxis_function_exists(self):
                  """Test if get_taxis function exists"""
                  self.assertTrue(hasattr(main, 'get_taxis'), "get_taxis function should exist")
                  
              @unittest.skipIf(not HAS_MODULE, "Module not available")
              def test_get_spark_function_exists(self):
                  """Test if get_spark function exists"""
                  self.assertTrue(hasattr(main, 'get_spark'), "get_spark function should exist")
          
          if __name__ == '__main__':
              unittest.main()
          EOF
          
          # Run tests
          python -m pytest tests/ -v
          
      - name: Generate Coverage Report
        run: |
          python -m pytest tests/ --cov=src/ --cov-report=xml
          # Print coverage report to console
          echo "Test coverage report:"
          cat coverage.xml 