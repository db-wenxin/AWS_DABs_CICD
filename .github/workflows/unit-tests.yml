name: Unit Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          # Install project dependencies
          pip install pytest pytest-cov
          # Install project in development mode
          pip install -e .
          
      - name: Run Tests
        run: |
          # Create a simple test for demonstration
          mkdir -p tests
          cat > tests/test_main.py << 'EOF'
          import unittest
          import sys
          import os
          
          # Add src to path for importing
          sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'src'))
          
          try:
              from bundlesDevOpsDemo import main
              HAS_MODULE = True
          except ImportError:
              HAS_MODULE = False
          
          class TestMain(unittest.TestCase):
              def test_module_exists(self):
                  """Test if the module exists"""
                  self.assertTrue(HAS_MODULE, "bundlesDevOpsDemo module should exist")
                  
              @unittest.skipIf(not HAS_MODULE, "Module not available")
              def test_get_taxis_function_exists(self):
                  """Test if get_taxis function exists"""
                  self.assertTrue(hasattr(main, 'get_taxis'), "get_taxis function should exist")
                  
              @unittest.skipIf(not HAS_MODULE, "Module not available")
              def test_get_spark_function_exists(self):
                  """Test if get_spark function exists"""
                  self.assertTrue(hasattr(main, 'get_spark'), "get_spark function should exist")
          
          if __name__ == '__main__':
              unittest.main()
          EOF
          
          # Run tests
          python -m pytest tests/ -v
          
      - name: Generate Coverage Report
        run: |
          python -m pytest tests/ --cov=src/ --cov-report=xml
          
      - name: Upload Coverage Report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage.xml 